// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//MODEL FOR STANDARD CREDENTIALS USER
model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?
  role     String  @default("user")
}

//MODEL FOR USER LOGGED WITH GITHUB
model GithubUser {
  id    Int     @id
  email String  @unique
  name  String?
  role  String  @default("user")
}

//RECIPE MODEL
model Recipe {
  id             Int                    @id @default(autoincrement())
  title          String
  cookingTime    String
  mealFor        String
  ingredients    IngredientsOnRecipes[]
  StepsOnRecipes StepsOnRecipes[]
}

//INGREDIENT MODEL
model Ingredient {
  id      Int                    @id @default(autoincrement())
  name    String
  ammount Float
  recipes IngredientsOnRecipes[]
}

model Step {
  id      Int              @id @default(autoincrement())
  step    String
  recipes StepsOnRecipes[]
}

//RECIPE INGREDIENT MODEL (MANY TO MANY)
model IngredientsOnRecipes {
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int

  @@id([recipeId, ingredientId])
}

model StepsOnRecipes {
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
  step     Step   @relation(fields: [stepId], references: [id])
  stepId   Int

  @@id([recipeId, stepId])
}
